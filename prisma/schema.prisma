// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  email                    String? // Store the email address for this account (e.g., Gmail address)
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String?          @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  posts           Post[]
  emailThreads    EmailThread[]
  emailMessages   EmailMessage[]
  gmailSyncStates GmailSyncState[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

// One Gmail thread (conversation). Lightweight; Messages carry the heavy content.
model EmailThread {
  id            String    @id @default(cuid())
  userId        String
  gmailThreadId String // e.g. "176e3b4…"
  subject       String? // latest known subject
  lastMessageAt DateTime? // for sorting inbox

  // denormalized helpers
  snippet String? @db.Text

  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages EmailMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isRead      Boolean @default(false)
  isStarred   Boolean @default(false)
  isImportant Boolean @default(false)

  @@unique([userId, gmailThreadId])
  @@index([userId, lastMessageAt])
  @@index([userId, isRead, lastMessageAt])
  @@index([userId, isStarred])
}

// One email message within a thread.
model EmailMessage {
  id             String   @id @default(cuid())
  userId         String
  threadId       String
  gmailMessageId String // e.g. "1862a9c…"
  internalDate   DateTime // Gmail internalDate
  // basic headers
  from           String?
  to             String? // comma-separated; keep it simple
  cc             String?
  bcc            String?
  subject        String?
  snippet        String?  @db.Text
  // storage
  rawS3Key       String? // s3 key to raw RFC822 if you store it
  htmlS3Key      String? // s3 key to sanitized HTML body
  textPlain      String?  @db.Text // optional: quick search/snippet

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  thread      EmailThread  @relation(fields: [threadId], references: [id], onDelete: Cascade)
  attachments Attachment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, gmailMessageId])
  @@index([threadId, internalDate])
  @@index([userId, subject])
}

// File attachments (inline or regular).
model Attachment {
  id        String  @id @default(cuid())
  messageId String
  filename  String?
  mimeType  String?
  sizeBytes Int?
  s3Key     String // where the file lives
  inlineCid String? // for inline images referenced by <img cid=...>

  message EmailMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

// Track Gmail history & cursors for each linked account (per user).
model GmailSyncState {
  id            String    @id @default(cuid())
  userId        String
  provider      String // e.g. "google"
  email         String // the Gmail address
  historyId     String? // last synced Gmail historyId
  lastFullSync  DateTime?
  lastDeltaSync DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider, email])
  @@index([email])
}
